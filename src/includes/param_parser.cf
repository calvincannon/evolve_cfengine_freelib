      "param_file" string => canonifyuniquely( "${ref}" );

      "p"
         comment    => "Index params",
         slist      => getindices( "params" );

      # parse_${param_file}_as_csv::
         "csv_data"
            comment    => "Parse csv file",
            ifvarclass => "parse_${param_file}_as_csv",
            data       => data_readstringarrayidx(
               "${ref}",
               "${efl_c.comment}",
               "${efl_c.array_delimiter}",
               "${efl_c.max_num}",
               "${efl_c.max_bytes}"
            );

         "t" 
            comment    => "index from csv file may not be in the correct order",
            ifvarclass => "parse_${param_file}_as_csv",
            slist      => getindices( "csv_data" );

         "tmp[${t}][${params[${p}]}]"
            comment    => "Transform to provide column labels",
            ifvarclass => "parse_${param_file}_as_csv",
            string     => "${csv_data[${t}][${p}]}";

         "d"
            comment    => "Turn into a true data container",
            ifvarclass => "parse_${param_file}_as_csv",
            data       => mergedata( tmp );

      # parse_${param_file}_as_json::
         "json_data"
            comment    => "Parse json file",
            ifvarclass => "parse_${param_file}_as_json" ,
            data       => readjson( "${ref}", "${efl_c.max_bytes}" );

      # final data here from any param file::
         "d"
            comment    => "Expand vars inside of container",
            data       => data_expand( "json_data" );

         "i_unsorted"
            comment    => "Index data, but unsorted",
            slist      => getindices( "d" );

         "i"
            comment    => "Ensure data is ordered because read functions may not",
            slist      => sort( i_unsorted, int );
